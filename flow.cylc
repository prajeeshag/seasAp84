#!Jinja2

{% from 'site.cylc' import SITE, CONDA_CMD, PKG_INSTALL_ROOT %}
{% from 'site.cylc' import ARCHIVE_ROOT, SKRIPS_DIR, DATA_DIR, FIX_DIR %}

{% from 'param.cylc' import initialCyclePoint, NMEMBERS, cycle, only_wrf, install_pkgs, atmDt, FCSTDURATION, atm_res %}
{% from 'param.cylc' import spectral_nudging %}

{% if cycle != 'R1' %}
{% from 'site.cylc' import finalCyclePoint %}
{% endif %}

{% if not only_wrf %}
{% from 'param.cylc' import ocnDt, cpldDt %}
{% endif %}

{% if graph is defined %}
    # For cylc graph set NMEMBERS = 2
    {% set NMEMBERS=2 %}
{% endif %}

{% set cpuOCN = 238 %}
{% set ocnDtBal = 20 %}
{% set RUNDURATION_BAL = 'P1D' %}

[scheduler]
    install = parm/, fix/

[task parameters]
    mem = 1..{{ NMEMBERS }}

[scheduling]
    initial cycle point = {{ initialCyclePoint }}-02
    {% if cycle != 'R1' %}
    final cycle point = {{ finalCyclePoint }}-02
    {% endif %}
    [[queues]]
        [[[main_queue]]]
            limit = 100  
            members = SKRIPS

    [[graph]]
        {% if install_pkgs %}
        R1 = """
            installMambaPkgs
        """
        {% endif %}

        {{cycle}} = """
            {% if not only_wrf %}
                {% if install_pkgs %}
                    installMambaPkgs[^] => mkOcnICBC<mem>
                {% endif %}
                mkOcnICBC<mem> => mitgcmBal<mem>
                mitgcmBal<mem> => skrips<mem>
                mitgcm2nc<mem> => archive<mem>
            {% endif %}

            ungrib<mem> => metgrid<mem>
            metgrid<mem> => real<mem>

            {% if not only_wrf %}
                real<mem> => skrips<mem>
                skrips<mem> => upp<mem>
                skrips<mem> => mitgcm2nc<mem>
                skrips<mem> => varSplitWRF2d<mem>
            {% else %}
                real<mem> => only_wrf<mem>
                only_wrf<mem> => upp<mem>
                only_wrf<mem> => varSplitWRF2d<mem>
            {% endif %}

            upp<mem> => archive<mem>
            varSplitWRF2d<mem> => archive<mem>
            archive<mem> => cleanUp<mem>
            cleanUp<mem> => cleanAll
        """

[runtime]
    [[root]]
        ## Keep the runtime.root to as minimal as possible
        execution retry delays = PT2M
        [[[environment]]]
            SKRIPS_DIR={{SKRIPS_DIR}}
            DATA_DIR={{DATA_DIR}}
            FIX_DIR={{FIX_DIR}}
            SKRIPS_BUILD_NAME=AP4km
            CYCLE_DIR=${CYLC_WORKFLOW_WORK_DIR}/${CYLC_TASK_CYCLE_POINT}
            SHARE_DIR=${CYCLE_DIR}/share # TODO Shouldn't be inside work, move it WORKFLOW_SHARE_DIR
            PARM_DIR=${CYLC_WORKFLOW_RUN_DIR}/parm
            ARCHIVE_ROOT={{ ARCHIVE_ROOT }}
            ARCHIVE_DIR=$ARCHIVE_ROOT/${CYLC_WORKFLOW_NAME}/${CYLC_TASK_CYCLE_POINT}
            FCST_END_TIME=$(isodatetime ${CYLC_TASK_CYCLE_POINT} --offset={{ FCSTDURATION }})
            syyyy=${CYLC_TASK_CYCLE_POINT:0:4}
            smm=${CYLC_TASK_CYCLE_POINT:4:2}
            sdd=${CYLC_TASK_CYCLE_POINT:6:2}
            shh=${CYLC_TASK_CYCLE_POINT:9:2}
            eyyyy=${FCST_END_TIME:0:4}
            emm=${FCST_END_TIME:4:2}
            edd=${FCST_END_TIME:6:2}
            ehh=${FCST_END_TIME:9:2}

            interval_seconds = 43200 # boundary forcing interval for wrf
            {% if atm_res == "4km" %}
                cu_physics = 0
            {% elif atm_res == "8km" %}
                cu_physics = 1
            {% endif %}

            grid_fdda = 0
            {% if spectral_nudging %}
                grid_fdda = 2
            {% endif %}

    [[installMambaPkgs]]
        platform=shaheen_login
        script=" {{CONDA_CMD}} create -f $PARM_DIR/env.yaml -p {{PKG_INSTALL_ROOT}} -y  "

    [[ENSMEMBER]]
        [[[environment]]]
            memN=$CYLC_TASK_PARAM_mem
            MEM_SHARE_DIR=${SHARE_DIR}/mem${CYLC_TASK_PARAM_mem}
            MEM_ARCHIVE_DIR=${ARCHIVE_DIR}/mem${CYLC_TASK_PARAM_mem}
            OUTDIR=$MEM_SHARE_DIR/archive/outputs # TODO: shouldn't be inside share

    [[WRF]]
        [[[environment]]]
            nproc_x=-1
            nproc_y=-1
            time_step={{atmDt}}
            wrf3dFreq=21600 # 6 hourly
            wrf2dFreq=3600 # hourly
            restart='.false.'
            restart_interval=$(isodatetime --as-total=m {{ FCSTDURATION }} )
            wrflowinp_interval=$(( interval_seconds/60 ))

    [[UNGRIB]]
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/ungrib_inputs/*.grib .
            ln -sf $SHARE_DIR/ungrib_inputs/*.grib .
            envsub $PARM_DIR/wps/namelist.wps namelist.wps
            envsub $PARM_DIR/wps/Vtable Vtable
            ln_safe "$ungrib_dir" .
            $link_grib ./*.grib
        """
        script = """
            ./ungrib/ungrib.exe
            cat ungrib.log
            grep "Successful completion" ungrib.log
        """
        post-script = """
            mv FILE* $MEM_SHARE_DIR
            # rm -rf *
        """
        [[[environment]]]
            ungrib_dir=$SKRIPS_DIR/external/WPS/ungrib
            link_grib=$SKRIPS_DIR/external/WPS/link_grib.csh

    [[ungrib<mem>]]
        inherit = UNGRIB, ENSMEMBER

    [[METGRID]]
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/FILE* .
            envsub $PARM_DIR/wps/namelist.wps namelist.wps
            ln_safe $metgrid_dir .
            ln_safe $FIX_DIR/{{atm_res}}/geo_em.d01_mod.nc geo_em.d01.nc
            #  Use metgrid table from Hari for better SST interpolation
            cp $PARM_DIR/wps/METGRID.TBL.ARW metgrid/METGRID.TBL
        """
        script = """
            ./metgrid/metgrid.exe
            cat metgrid.log
            grep "Successful completion" metgrid.log
        """
        post-script = """
            mv met_em* $MEM_SHARE_DIR
            rm -rf *
        """
        [[[environment]]]
            metgrid_dir=$SKRIPS_DIR/external/WPS/metgrid

    [[metgrid<mem>]]
        inherit = METGRID, ENSMEMBER

    [[REAL]]
        inherit = None, WRF
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/met_em* .
            ln_safe $FIX_DIR/{{atm_res}}/geo_em.d01_mod.nc geo_em.d01.nc
            source grid_info_wrf.sh geo_em.d01.nc
            envsuball $PARM_DIR/wrf/*
        """
        script = "$run_cmd $real_exe"
        post-script = """
            mv wrf*_d?? $MEM_SHARE_DIR
            rm -rf *
        """

        [[[environment]]]
            nproc_x=-1
            nproc_y=-1
            nio_groups=0
            nio_tasks_per_group=0
            real_exe=$SKRIPS_DIR/external/WRF/main/real.exe
            #run_cmd = site specific run command: e.g. mpirun -n 4

    [[real<mem>]]
        inherit = REAL, ENSMEMBER

    [[ONLY_WRF]]
        inherit = None, WRF
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/wrf*_d?? .
            cp -f $em_real_dir/* .
            ln_safe $FIX_DIR/{{atm_res}}/geo_em.d01_mod.nc geo_em.d01.nc
            source grid_info_wrf.sh geo_em.d01.nc
            envsuball $PARM_DIR/wrf/*
            source $env_file
        """

        script = "$run_cmd $wrf_exe"

        post-script = """
            mv *_d??_????-??-??_* $MEM_SHARE_DIR
            rm -rf *
        """
        [[[environment]]]
            atmDt={{ atmDt }}
            em_real_dir=$SKRIPS_DIR/external/WRF/test/em_real
            wrf_exe=$SKRIPS_DIR/external/WRF/main/wrf.exe
            env_file=$SKRIPS_DIR/env.mach
            #run_cmd = site specific run command: e.g. mpirun -n 4
            #cpuATM = site specific

    [[only_wrf<mem>]]
        inherit = ONLY_WRF, ENSMEMBER

    [[UPP]]
        pre-script = "ln -sf $MEM_SHARE_DIR/wrf3d_d01_????-??-??_* ."
        script = "upp.sh $prefixes"
        post-script = """
            mkdir -p $OUTDIR
            mv *.grb2 $OUTDIR
            rm -rf *
        """
        [[[environment]]]
            # run_cmd = site specific run command: e.g. "srun --exclusive --mem-per-cpu=2G --ntasks=16 "
            # max_par_jobs=10
            prefixes="wrf3d"
    [[upp<mem>]]
        inherit = UPP, ENSMEMBER

    [[VAR_SPLIT_WRF2d]]
        script = "varSplitWrf.sh -p wrf2d_ $MEM_SHARE_DIR/wrf2d_d01_????-??-??_*"
        post-script = """
            mkdir -p $OUTDIR
            mv wrf2d_*.nc $OUTDIR
            rm -rf *
        """

    [[varSplitWRF2d<mem>]]
        inherit = VAR_SPLIT_WRF2d, ENSMEMBER

    [[ARCHIVE]]
        script = """
        cd $MEM_SHARE_DIR
        mkdir -p $MEM_ARCHIVE_DIR
        rsync -av archive/* $MEM_ARCHIVE_DIR
        """

    [[archive<mem>]]
        inherit = ARCHIVE, ENSMEMBER

    [[CLEANUP]]
        script = """
        rm -rf $MEM_SHARE_DIR
        """ #TODO: This is risky, archive directory shouldn't be inside share

    [[cleanUp<mem>]]
        inherit = CLEANUP, ENSMEMBER

    [[cleanAll]]
        script = """
        rm -rf $CYCLE_DIR
        """ #TODO: This is risky, archive directory shouldn't be inside share


{% if not only_wrf %}
    [[MITGCM]]
        [[[environment]]]
            ocn_nx=800
            ocn_ny=780
            endTime=$(isodatetime --as-total=s {{ FCSTDURATION }} )
            deltaT={{ ocnDt }}
            ocn2dFreq=86400 # daily
            ocn3dFreq=432000 # 5 day
            cpuOCN={{ cpuOCN }}
            pickupSuff="' '"

    [[MK_OCN_ICBC]]
        inherit = None, MITGCM
        pre-script = """
            rm -rf *
            envsub $PARM_DIR/mitgcm/data data
            ln_safe $FIX_DIR/bathymetry.bin .
            ln_safe $FIX_DIR/tile001.mitgrid .
        """
        script = "mkOcnICBC -i $input_dir --nx $ocn_nx --ny $ocn_ny --imask $seas5_ocn_mask"
        post-script = """
            mv ob*.bin *_ini.bin $MEM_SHARE_DIR
            rm -rf *
        """
        [[[environment]]]
            #seas5_ocn_mask
            #input_dir

    [[mkOcnICBC<mem>]]
        inherit = MK_OCN_ICBC, ENSMEMBER


    [[MITGCM_BAL]]
        inherit = None, MITGCM
        pre-script="""
            rm -rf *
            ln -sf $MEM_SHARE_DIR/ob*.bin .
            ln -sf $MEM_SHARE_DIR/*_ini.bin .
            ln_safe $FIX_DIR/bathymetry.bin .
            ln_safe $FIX_DIR/tile001.mitgrid .
            envsuball $PARM_DIR/mitgcm/*
        """
        script = "$run_cmd $mitgcm_exe"
        post-script="""
            mv pickup.ckptA.* $MEM_SHARE_DIR
            rm -rf *
        """
        [[[environment]]]
            mitgcm_exe=$SKRIPS_DIR/build/${SKRIPS_BUILD_NAME}/${cpuOCN}/mitgcm/mitgcmuv
            endTime=$(isodatetime --as-total=s {{ RUNDURATION_BAL }} )
            deltaT={{ ocnDtBal }}
            ocn2dFreq=86400000 # no output
            ocn3dFreq=43200000 # no output
            #run_cmd = site specific run command: e.g. mpirun -n 4

    [[mitgcmBal<mem>]]
        inherit = MITGCM_BAL, ENSMEMBER

    [[SKRIPS]]
        inherit = None, MITGCM, WRF
        pre-script = """
            rm -rf *
            cp $MEM_SHARE_DIR/pickup.ckptA.* .
            ln -sf $MEM_SHARE_DIR/*.bin .
            ln -sf $MEM_SHARE_DIR/wrf*_d?? .
            cp -f $em_real_dir/* .
            ln_safe $FIX_DIR/bathymetry.bin .
            ln_safe $FIX_DIR/tile001.mitgrid .
            ln_safe $FIX_DIR/{{atm_res}}/geo_em.d01_mod.nc geo_em.d01.nc
            source grid_info_wrf.sh geo_em.d01.nc
            envsuball $PARM_DIR/wrf/*
            envsuball $PARM_DIR/mitgcm/*
            envsuball $PARM_DIR/cpld/*
        """

        script = "$run_cmd $skrips_exe"

        post-script = """
            rm pickup.ckptA.*
            mv *_d??_????-??-??_* $MEM_SHARE_DIR
            mv *.data *.meta *.log $MEM_SHARE_DIR
            rm -rf *
        """
        [[[environment]]]
            cpldDt={{ cpldDt }}
            atmDt={{ atmDt }}
            ocnDt={{ ocnDt }}
            pickupSuff="ckptA"
            em_real_dir=$SKRIPS_DIR/external/WRF/test/em_real
            skrips_exe=$SKRIPS_DIR/build/${SKRIPS_BUILD_NAME}/${cpuOCN}/main/skrips.exe
            #run_cmd = site specific run command: e.g. mpirun -n 4
            #cpuATM = site specific
            cpuOCN = {{ cpuOCN }}
            wrflowinp_interval=100000000

    [[skrips<mem>]]
        inherit = SKRIPS, ENSMEMBER

    [[MITGCM2NC]]
        inherit = None, MITGCM
        pre-script = """
            ln -sf $MEM_SHARE_DIR/*.data .
            ln -sf $MEM_SHARE_DIR/*.meta .
            ln_safe $MEM_SHARE_DIR/available_diagnostics.log .
        """

        script = "mitgcm2nc --date $date --dt $deltaT $prefixes"

        post-script = """
            mkdir -p $OUTDIR
            mv *.nc $OUTDIR
            rm -rf *
        """
        [[[environment]]]
            date="${syyyy}-${smm}-${sdd}:${shh}:00:00"
            prefixes="ocn2d ocn3d"

    [[mitgcm2nc<mem>]]
        inherit = MITGCM2NC, ENSMEMBER

{% endif %}


{% include 'include/' ~ SITE ~ '/flow.cylc' %}
